<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Machine Learning Notebooks - articles</title><link href="https://dbgriffith01.github.io/" rel="alternate"></link><link href="https://dbgriffith01.github.io/feeds/articles.atom.xml" rel="self"></link><id>https://dbgriffith01.github.io/</id><updated>2017-03-15T10:00:00-07:00</updated><entry><title>Gradient Descent for Linear Regression</title><link href="https://dbgriffith01.github.io/blog/2017/03/15/gradient-descent/" rel="alternate"></link><published>2017-03-15T10:00:00-07:00</published><updated>2017-03-15T10:00:00-07:00</updated><author><name>Daniel Griffith</name></author><id>tag:dbgriffith01.github.io,2017-03-15:blog/2017/03/15/gradient-descent/</id><summary type="html">

&lt;p&gt;I wanted to go over a simple example for implementing gradient descent. Gradient descent is used often in neural networks, logistic regression and may other models.  In linear regression, we have a closed form solution to calculate the coefficents for a model.  The closed form solution to calculate the coefficents is:&lt;/p&gt;
$$\hat{\beta} = (X^TX)^{-1}X^Ty$$&lt;p&gt;To understand the power of gradient descent we will not use the closed form solution, but rather go through calculating the coeffiecients of the model with gradient descent.&lt;/p&gt;
</summary><category term="regression"></category><category term="gradient-descent"></category></entry><entry><title>Calculating Win Probabilities for College Football</title><link href="https://dbgriffith01.github.io/blog/2017/02/27/cfb-win-probs/" rel="alternate"></link><published>2017-02-27T07:00:00-08:00</published><updated>2017-02-27T07:00:00-08:00</updated><author><name>Daniel Griffith</name></author><id>tag:dbgriffith01.github.io,2017-02-27:blog/2017/02/27/cfb-win-probs/</id><summary type="html">

&lt;p&gt;Using only 1 factor (Vegas line), we will try to calculate the probability associated with a college football team winning the game using Python and StatsModels. The Vegas Line provides a model with minimal bias, and a very good use case to show Logistic Regression in Practice.&lt;/p&gt;
</summary><category term="statsmodels"></category><category term="logistic"></category><category term="matplotlib"></category><category term="football"></category></entry></feed>